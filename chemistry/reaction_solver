#!/usr/bin/env python3
import skilstak.colors as c

elements = {
        'H': ['hydrogen','other nonmetal',1,1,1,1.008],
        'He': ['helium','noble gas',2,1,18,4.003],
        'Li': ['lithium','alkali metal',3,2,1,6.94],
        'Be': ['beryllium','alkaline earth metal',4,2,2,9.012],
        'B': ['boron','metalloid',5,2,13,10.81],
        'C': ['carbon','other nonmetal',6,2,14,12.011],
        'N': ['nitrogen','other nonmetal',7,2,15,14.007],
        'O': ['oxygen','other nonmetal',8,2,16,15.999],
        'F': ['fluorine','halogen',9,2,17,18.998],
        'Ne': ['neon','noble gas',10,2,18,20.18],
        'Na': ['sodium','alkali metal',11,3,1,22.99],
        'Mg': ['magnesium','alkaline earth metal',12,3,2,24.305],
        'Al': ['aluminium','post-transition metal',13,3,13,26.982],
        'Si': ['silicon','metalloid',14,3,14,28.085],
        'P': ['phosphorus','other nonmetal',15,3,15,30.974],
        'S': ['sulfur','other nonmetal',16,3,16,32.06],
        'Cl': ['chlorine','halogen',17,3,17,35.45],
        'Ar': ['argon','noble gas',18,3,18,39.948],
        'K': ['potassium','alkali metal',19,4,1,39.098],
        'Ca': ['calcium','alkaine earth metal',20,4,2,40.078],
        'Sc': ['scandium','transition metal',21,4,3,44.956],
        'Ti': ['titanium','transition metal',22,4,4,47.867],
        'V': ['vanadium','transition metal',23,4,5,50.942],
        'Cr': ['chromium','transtiton metal',24,4,6,51.996],
        'Mn': ['manganese','transtiton metal',25,4,7,54.938],
        'Fe': ['iron','transtiton metal',26,4,8,55.845],
        'Co': ['cobalt','transtiton metal',27,4,9,58.933],
        'Ni': ['nickel','transtiton metal',28,4,10,58.693],
        'Cu': ['copper','transtiton metal',29,4,11,63.546],
        'Zn': ['zinc','transtiton metal',30,4,12,65.38],
        'Ga': ['gallium','post-transtiton metal',31,4,13,69.723],
        'Ge': ['germanium','metalloid',32,4,14,72.63],
        'As': ['arsenic','metalloid',33,4,15,74.922],
        'Se': ['selenium','other nonmetal',34,4,16,78.96],
        'Br': ['bromine','halogen',35,4,17,79.904],
        'Kr': ['krypton','noble gas',36,4,18,83.798],
        'Rb': ['rubidium','alkali metal',37,5,1,85.468],
        'Sr': ['strontium','alkalin earth metals',38,5,2,87.62],
        'Y': ['yttrium','transtiton metal',39,5,3,88.906],
        'Zr': ['zirconium','transtiton metal',40,5,4,91.224],
        'Nb': ['niobium','transtiton metal',41,5,5,92.906],
        'Mo': ['molybdenur','transtiton metal',42,5,6,95.96],
        'Tc': ['technetium','transtiton metal',43,5,7,98],
        'Ru': ['ruthentium','transtiton metal',44,5,8,101.07],
        'Rh': ['rhodium','transtiton metal',45,5,9,102.905],
        'Pd': ['palladium','transtiton metal',46,5,10,106.42],
        'Ag': ['silver','transtiton metal',47,5,11,107.868],
        'Cd': ['cadmium','transtiton metal',48,5,12,112.411],
        'In': ['indium','post-transtiton metal',49,5,13,114.818],
        'Sn': ['tin','post-transtiton metal',50,5,14,118.71],
        'Sb': ['antimony','metalloid',51,5,15,121.76],
        'Te': ['tellurium','metalloid',52,5,16,127.6],
        'I': ['iodine','halogen',53,5,17,126.904],
        'Xe': ['xenon','noble gas',54,5,18,131.293],
        'Cs': ['caesium','alkali metal',55,6,1,132.905],
        'Ba': ['barium','alkalin earth metal',56,6,2,137.327],
        'La': ['lanthanum','lanthanoid',57,0,0,138.905],
        'Ce': ['cerium','lanthanoid',58,0,0,140.116],
        'Pr': ['praseodymium','lanthanoid',59,0,0,140.907],
        'Nd': ['neodymium','lanthanoid',60,0,0,144.242],
        'Pm': ['promethium','lanthanoid',61,0,0,145],
        'Sm': ['samarium','lanthanoid',62,0,0,150.36],
        'Eu': ['europium','lanthanoid',63,0,0,151.964],
        'Gd': ['gadolinium','lanthanoid',64,0,0,157.25],
        'Tb': ['terbium','lanthanoid',65,0,0,158.925],
        'Dy': ['dysprosium','lanthanoid',66,0,0,162.5],
        'Ho': ['holmium','lanthanoid',67,0,0,164.93],
        'Er': ['erbium','lanthanoid',68,0,0,167.259],
        'Tm': ['thulium','lanthanoid',69,0,0,168.934],
        'Yb': ['ytterbium','lanthanoid',70,0,0,173.054],
        'Lu': ['lutetium','lanthanoid',71,0,0,174.967],
        'Hf': ['hafnium','transtiton metal',72,6,4,178.49],
        'Ta': ['tantalum','transtiton metal',73,6,5,180.9],
        'W': ['tungsten','transtiton metal',74,6,6,183.84],
        'Re': ['rhenium','transtiton metal',75,6,7,186.207],
        'Os': ['osmium','transtiton metal',76,6,8,190.23],
        'Ir': ['iridium','transtiton metal',77,6,9,192.217],
        'Pt': ['platinum','transtiton metal',78,6,10,195.084],
        'Au': ['gold','transtiton metal',79,6,11,196.966],
        'Hg': ['mercury','transtiton metal',80,6,12,200.59],
        'Tl': ['thallium','post-transtiton metal',81,6,13,204.38],
        'Pb': ['lead','post-transtiton metal',82,6,14,207.2],
        'Bi': ['bismuth','post-transtiton metal',83,6,15,208.98],
        'Po': ['polonium','metalloid',84,6,16,209],
        'At': ['astatine','halogen',85,6,17,210],
        'Rn': ['radon','noble gas',86,6,18,222],
        'Fr': ['francium','alkali metal',87,7,1,223],
        'Ra': ['radium','alkaline earth metal',88,7,2,226],
        'Ac': ['actinium','actinoid',89,0,0,227],
        'Th': ['thorium','actinoid',90,0,0,232.038],
        'Pa': ['protactinium','actinoid',91,0,0,231.035],
        'U': ['uranium','actinoid',92,0,0,238.028],
        'Np': ['neptunium','actinoid',93,0,0,237],
        'Pu': ['plutonium','actinoid',94,0,0,244],
        'Am': ['americium','actinoid',95,0,0,243],
        'Cm': ['curium','actinoid',96,0,0,247],
        'Bk': ['berkelium','actinoid',97,0,0,247],
        'Cf': ['californium','actinoid',98,0,0,251],
        'Es': ['einstienium','actinoid',99,0,0,252],
        'Fm': ['fermium','actinoid',100,0,0,257],
        'Md': ['mendelevium','actinoid',101,0,0,258],
        'No': ['nobelium','actinoid',102,0,0,259],
        'Lr': ['lawrencium','actinoid',103,0,0,262],
        'Rf': ['rutherfordium','transtiton metal',104,7,4,267],
        'Db': ['dubnium','transtiton metal',105,7,5,268],
        'Sg': ['seaborgium','transtiton metal',106,7,6,271],
        'Bh': ['bohrium','transtiton metal',107,7,7,272],
        'Hs': ['hassium','transtiton metal',108,7,8,270],
        'Mt': ['meitnerium','transtiton metal',109,7,9,276],
        'Ds': ['darmstadtium','transtiton metal',110,7,10,281],
        'Rg': ['roentgenium','transtiton metal',111,7,11,280],
        'Cn': ['copernicium','transtiton metal',112,7,12,285],
        'Nh': ['nihonium','post-transtiton metal',113,7,13,284],
        'Fl': ['flerovium','post-transtiton metal',114,7,14,289],
        'Mc': ['moscovium','post-transtiton metal',115,7,15,288],
        'Lv': ['livermorium','post-transtiton metal',116,7,16,293],
        'Ts': ['tennessine','halogen',117,7,17,294],
        'Og': ['oganesson','noble gas',118,7,18,294]
}

def error(error):
    input(f"{c.red}ERROR:{error}{c.x}")

def find_type(message):
    try:
        int(message)
        return 'atomicnum'
    except ValueError:
        if len(message) > 0 and len(message) < 3 and message[0].isupper():
            return 'symbol'
        else:
            return 'name'

def find_int(message):
    try:
        int(message)
        return True
    except ValueError:
        return False

def look_up():
    user_in = input(f"{c.clear}{c.blue}What element?{c.green}(Atomic #,Name,or Symbol){c.blue}\n")
    user_in_type = find_type(user_in)
    found = False
    if user_in_type == 'atomicnum':
        for (symbol,element) in elements.items():
            if element[2] == int(user_in):
                found = symbol
    elif user_in_type == 'symbol':
        for (symbol, element) in elements.items():
            if symbol == user_in:
                found = symbol
    elif user_in_type == 'name':
        for (symbol, element) in elements.items():
            if element[0] == user_in:
                found = symbol
    if not found:
        return False
    print(f'''
{c.clear}{c.blue}Symbol:{c.red}{found}
{c.blue}Name:{c.red}{elements[found][0]}
{c.blue}Group:{c.red}{elements[found][1]}
{c.blue}Atomic #:{c.red}{elements[found][2]}
{c.blue}Row:{c.red}{elements[found][3]}
{c.blue}Column:{c.red}{elements[found][4]}
{c.blue}Atomic Mass:{c.red}{elements[found][5]}''')
    input()

def format_compound(compound):
    if int(compound[1]):
        return [compound[0],int(compound[1])]
    else:
        return [compound[0],1]

def parce_reaction(reaction):
    reaction = reaction.strip()
    correct_start = False
    passed_first = False
    after_arrow = False
    element_num = '0'
    current_compound = ['','0']
    product_elements = []
    reactant_elements = []
    product_compounds = []
    reactant_compounds = []
    i = 0
    while i < len(reaction):
        symbol = reaction[i]
        if find_int(symbol):
            if passed_first:
                current_compound[0] += symbol
            else:
                current_compound[1] += symbol 
            i += 1
        elif symbol == '+':
            if after_arrow:
                product_compounds.append(format_compound(current_compound))
                current_compound = ['','0']
                passed_first = False
            else:
                reactant_compounds.append(format_compound(current_compound))
                current_compound = ['','0']
                passed_first = False
            i += 1
        elif symbol == '-' and reaction[i+1] == '>':
            reactant_compounds.append(format_compound(current_compound))
            current_compound = ['','0']
            after_arrow = True
            passed_first = False
            i += 2
        else:
            if symbol != ' ':
                current_compound[0] += symbol
                passed_first = True
            i += 1
    product_compounds.append(format_compound(current_compound))
    current_compound = ['','0']
    for compound in reactant_compounds:
        i = 0
        pren_num = '0'
        in_pren = False
        while i < len(compound[0]):
            symbol = compound[0][i]
            element_num = '0'
            found = False
            if symbol.isupper():
                try:
                    if compound[0][i+1].islower():
                        current_element = symbol + compound[0][i+1]
                        n = 2
                    else:
                        current_element = symbol
                        n = 1
                except IndexError:
                    current_element = symbol
                    n = 1
                try:
                    while find_int(compound[0][i+n]):
                        element_num += compound[0][i+n]
                        n += 1
                except IndexError:
                    pass
                if not int(element_num):
                    element_num = 1
                else:
                    element_num = int(element_num)
                if in_pren:
                    element_num *= pren_num * compound[1]
                else:
                    element_num *= compound[1]
                t = 0
                while t < len(reactant_elements):
                    if reactant_elements[t][0] == current_element:
                        reactant_elements[t][1] += element_num
                        found = True
                    t += 1
                if not found:
                    reactant_elements.append([current_element,element_num])
                i += n
            elif symbol == '(':
                in_pren = True
                n = 1
                while compound[0][i+n] != ')':
                    n += 1
                n += 1
                try:
                    while find_int(compound[0][i+n]):
                        pren_num += compound[0][i+n]
                        n += 1
                except IndexError:
                    pass
                if not int(pren_num):
                    pren_num = 1
                else:
                    pren_num = int(pren_num)
                i += 1
            elif symbol == ')':
                in_pren = False
                pren_num = '0'
                i += 1
            else: 
                if find_int(symbol):
                    i += 1
                else:
                    error("Invalid symbol detected")
                    return False
    for compound in product_compounds:
        i = 0
        pren_num = '0'
        in_pren = False
        while i < len(compound[0]):
            symbol = compound[0][i]
            element_num = '0'
            found = False
            if symbol.isupper():
                try:
                    if compound[0][i+1].islower():
                        current_element = symbol + compound[0][i+1]
                        n = 2
                    else:
                        current_element = symbol
                        n = 1
                except IndexError:
                    current_element = symbol
                    n = 1
                try:
                    while find_int(compound[0][i+n]):
                        element_num += compound[0][i+n]
                        n += 1
                except IndexError:
                    pass
                if not int(element_num):
                    element_num = 1
                else:
                    element_num = int(element_num)
                print(pren_num)
                if in_pren:
                    element_num *= pren_num * compound[1]
                else:
                    element_num *= compound[1]
                t = 0
                while t < len(product_elements):
                    if product_elements[t][0] == current_element:
                        product_elements[t][1] += element_num
                        found = True
                    t += 1
                if not found:
                    product_elements.append([current_element,element_num])
                i += n
            elif symbol == '(':
                in_pren = True
                n = 1
                while compound[0][i+n] != ')':
                    n += 1
                n += 1
                try:
                    while find_int(compound[0][i+n]):
                        pren_num += compound[0][i+n]
                        n += 1
                except IndexError:
                    pass
                if not int(pren_num):
                    pren_num = 1
                else:
                    pren_num = int(pren_num)
                i += 1
            elif symbol == ')':
                in_pren = False
                pren_num = '0'
                i += 1
            else:
                if find_int(symbol):
                    i += 1
                else:
                    error("Invalid symbol detected")
                    return False
    print(product_compounds)
    print(reactant_compounds)
    print(product_elements)
    print(reactant_elements)
    input()

parce_reaction(input())

