#!/usr/bin/env python3
import skilstak.colors as c
import termbox 
import math

triangle = {'a': 0,
        'b': 0,
        'c': 0,
        '<a': 0,
        '<b': 90,
        '<c': 0
}

angles = ['<a','<c']
sides = ['a','b','c']
angles_sides = ['<a','<c','a','b','c']


def error(message):
    input(c.red + "ERROR:" + message + c.x)

def tryforint(value):
    try:
        value = int(value)
        return value
    except ValueError:
        try:
            value = float(value)
            return value
        except ValueError:
            error("Not a number")
            return False

def set_value():
    while True:
        which = input(c.clear + c.blue + "What value? (a,b,c,<a,<c)\n" + c.x).lower().strip()
        for i in ['a','b','c','<a','<c']:
            if which == i:
                value = input(c.clear + c.blue + f'Input new value of {c.red}{i}{c.x}\n').strip().lower()
                value = tryforint(value)
                if not value:
                    continue
                if i.startswith('<') and value > 89:
                    error('Angle has to be under 90')
                    continue
                triangle[i] = value
        if not which in ['a','b','c','<a','<c']:
            error("Not an option!")
            continue
        break

def oppadjofangle(angle):
    if angle == '<a':
        return ['b','a']
    elif angle == '<c':
        return ['a','b']

def solve_triangle():
    num_angles = 0
    num_sides = 0
    angles_known = []
    angles_unknown = ['<a','<c']
    sides_known = []
    sides_unknown = ['a','b','c']
    sides_unknown_loop = ['a','b','c']
    angles_unknown_loop = ['<a','<c']
    for key in triangle.keys():
        if key.startswith('<'):
            if triangle[key] != 0 and triangle[key] != 90:
                num_angles += 1
                angles_known.append(key)
                angles_unknown.remove(key)
                angles_unknown_loop.remove(key)
        else:
            if triangle[key] != 0:
                num_sides += 1
                sides_known.append(key)
                sides_unknown.remove(key)
                sides_unknown_loop.remove(key)
    if num_angles < 1 or num_sides < 1:
        if num_sides < 2:
            error("Need more sides/angles")
            return False
    if sides == sides_known and triangle['a'] + triangle['b'] < triangle['c']:
        error("Side A + B can't be less than the Hyp(C)")
        return False
    if len(angles_known) + len(sides_known) == 4:
        error("More than 4 sides and or angles are set")
        return False
    if sides == sides_known and math.pow(triangle['a'],2)+math.pow(triangle['b'],2) != math.pow(triangle['c'],2):
        error("Sides don't follow A^2+B^2=C^2")
        return False
    if triangle['<a'] + triangle['<c'] > 90:
        error("Angles A + C > 90")
        return False
    for i in sides_unknown_loop:
        if len(sides_known) == 2:
            if 'c' in sides_known:
                if 'a' in sides_known:
                    triangle[i] = math.sqrt(math.pow(triangle['c'],2)-math.pow(triangle['a'],2))
                elif 'b' in sides_known:
                    triangle[i] = math.sqrt(math.pow(triangle['c'],2)-math.pow(triangle['b'],2))
                sides_known.append(i)
                sides_unknown.remove(i)
            else:
                triangle[i] = math.sqrt(math.pow(triangle['a'],2)+math.pow(triangle['b'],2))
                print('test')
                sides_known.append(i)
                sides_unknown.remove(i)
        else:
            working_angle = angles_known[0]
            angle_oppadj = oppadjofangle(working_angle)
            if 'c' in sides_known: 
                if i == angle_oppadj[0]:
                    triangle[i] = math.sin(math.radians(triangle[working_angle]))*triangle['c']
                    sides_known.append(i)
                    sides_unknown.remove(i)
                elif i == angle_oppadj[1]:
                    triangle[i] = math.cos(math.radians(triangle[working_angle]))*triangle['c']
                    sides_known.append(i)
                    sides_unknown.remove(i)
            else:
                if i == angle_oppadj[0]:
                    triangle[i] = math.tan(math.radians(triangle[working_angle]))*triangle[angle_oppadj[1]]
                    sides_known.append(i)
                    sides_unknown.remove(i)
                elif i == angle_oppadj[1]:
                    triangle[i] = math.tan(math.radians(triangle[working_angle]))*triangle[angle_oppadj[0]]
                    sides_known.append(i)
                    sides_unknown.remove(i)
    print(angles_unknown_loop)
    for i in angles_unknown_loop:
        if len(angles_unknown) == 1:
            triangle[i] = 90-triangle[angles_known[0]]
            angles_unknown.remove(i)
            angles_known.append(i)
        else:
            if i == '<a':
                triangle[i] = math.degrees(math.atan2(triangle['b'],triangle['a']))
                angles_unknown.remove(i)
                angles_known.append(i)
            elif i == '<b':
                triangle[i] = math.degrees(math.atan2(triangle['a'],triangle['b']))
                angles_unknown.remove(i)
                angles_known.append(i)

def print_centered(screen,message):
    w = screen.width()
    h = screen.height()
    lines = []
    for i in message.splitlines():
        lines.append(i)
    largest = [0,0]
    for i in lines:
        if len(i) > largest[1]:
            largest = [lines.index(i),len(i)]
    start_x = round(w/2,0)-round(largest[1]/2,0)
    start_y = round(h/2,0)-round(len(lines)/2,0)
    for i in lines:
        t = 0
        while t < len(i):
            screen.change_cell(start_x+t,start_y+lines.index(i),ord(i[t]),termbox.BLUE,termbox.DEFAULT)
            t += 1
    screen.present()

def display_triangle():
    t = termbox.Termbox()
    triangle_text = f'''
{c.red}<A{c.blue}|\\
  | \\
  |  \\
 {c.red}A{c.blue}|   \\{c.red}C{c.blue}
  |    \\
  |     \\
  |______\\{c.red}<C{c.blue}
     {c.red}B{c.blue}

   <A:{c.red}{triangle['<a']}{c.blue}
   <C:{c.red}{triangle['<c']}{c.blue}
    A:{c.red}{triangle['a']}{c.blue}
    B:{c.red}{triangle['b']}{c.blue}
    C:{c.red}{triangle['c']}{c.blue}
    '''
    event = [0,0,0]
    while event[2] != termbox.KEY_ENTER:
        t.clear()
        event = t.peek_event(1)
        if event == None:
            event = [0,0,0]
        print_centered(t,triangle_text)
    t.close()

while True:
    text = input(c.clear + c.blue + f'''Side A:{c.red}{triangle['a']}{c.blue}
Side B:{c.red}{triangle['b']}{c.blue}
Side C:{c.red}{triangle['c']}{c.blue}
Angle A:{c.red}{triangle['<a']}{c.blue}
Angle C:{c.red}{triangle['<c']}{c.blue}
Type:{c.magenta}set{c.blue},{c.red}clear{c.blue},{c.green}solve{c.blue},{c.yellow}display{c.blue}:
''' + c.x).strip().lower()
    if text == 'set':
        set_value()
    elif text == 'solve':
        solve_triangle()
    elif text == 'clear':
        triangle = {'a': 0,
                'b': 0,
                'c': 0,
                '<a': 0,
                '<b': 90,
                '<c': 0
        }
    elif text == 'display':
        display_triangle()
